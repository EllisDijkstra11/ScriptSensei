import math

class Stroke:
    def __init__(self, stroke, input):
        self.stroke = stroke
        self.reverse_stroke = self.reverse_stroke(self.stroke)

        # If it's an input character, assume being right
        if input:
            self.direction = True
            self.order = True
        # If it's a template character, set to True if checked
        else:
            self.direction = False
            self.order = False

    def get_stroke(self):
        return self.stroke

    def set_direction(self, direction):
        self.direction = direction

    def get_direction(self):
        return self.direction
            
    def set_order(self, order):
        self.order = order

    def get_order(self):
        return self.order
    
    # @staticmethod
    def reverse_stroke(stroke):
        reverse_stroke = []
        for point in stroke:
            angle = point[0] + math.pi

            # Normalize the angle to be between pi and -pi
            angle = (angle + math.pi) % (2 * math.pi) - math.pi
            reverse_stroke.insert(0, [angle, point[1]])
        return reverse_stroke
        
    def get_reverse_stroke(self):
        return self.reverse_stroke

    def __repr__(self):
        return f"Stroke(order={self.order}, direction={self.direction})"


class Kanji:
    def __init__(self, input, strokes):
        self.input = input
        self.strokes = []

        # If it's an input character, assume being right
        if input:
            self.count = True
        # If it's a template character, set to True if checked
        else:
            self.count = False

        for stroke in strokes:
            self.add_stroke(self, stroke, input)

    def get_input(self):
        return self.input

    def add_stroke(self, stroke):
        stroke = Stroke(stroke)
        self.strokes.append(stroke)

    def get_stroke(self, index):
        if 0 <= index < len(self.strokes):
            return self.strokes[index]
        else:
            raise IndexError("Stroke index out of range")
    
    def set_count(self, count):
        self.count = count
    
    def get_count(self):
        return self.count
    
    def __repr__(self):
        return f"Kanji(character='{self.character}', meaning='{self.meaning}', strokes={self.strokes})"